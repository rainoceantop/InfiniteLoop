<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.InfiniteLoop.dao.RepliesMapper">
  <resultMap id="BaseResultMap" type="Replies">
    <id column="reply_id" jdbcType="INTEGER" property="replyId" />
    <result column="comment_id" jdbcType="INTEGER" property="commentId" />
    <result column="from_user_id" jdbcType="INTEGER" property="fromUserId" />
    <result column="to_user_id" jdbcType="INTEGER" property="toUserId" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="reply_likes" jdbcType="INTEGER" property="replyLikes" />
  </resultMap>
  <sql id="Base_Column_List">
    reply_id, comment_id, from_user_id, to_user_id, content, reply_likes
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from replies
    where reply_id = #{replyId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from replies
    where reply_id = #{replyId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="Replies">
    insert into replies (reply_id, comment_id, from_user_id, 
      to_user_id, content, reply_likes
      )
    values (#{replyId,jdbcType=INTEGER}, #{commentId,jdbcType=INTEGER}, #{fromUserId,jdbcType=INTEGER}, 
      #{toUserId,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR}, #{replyLikes,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="Replies">
    insert into replies
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="replyId != null">
        reply_id,
      </if>
      <if test="commentId != null">
        comment_id,
      </if>
      <if test="fromUserId != null">
        from_user_id,
      </if>
      <if test="toUserId != null">
        to_user_id,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="replyLikes != null">
        reply_likes,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="replyId != null">
        #{replyId,jdbcType=INTEGER},
      </if>
      <if test="commentId != null">
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="fromUserId != null">
        #{fromUserId,jdbcType=INTEGER},
      </if>
      <if test="toUserId != null">
        #{toUserId,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="replyLikes != null">
        #{replyLikes,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="Replies">
    update replies
    <set>
      <if test="commentId != null">
        comment_id = #{commentId,jdbcType=INTEGER},
      </if>
      <if test="fromUserId != null">
        from_user_id = #{fromUserId,jdbcType=INTEGER},
      </if>
      <if test="toUserId != null">
        to_user_id = #{toUserId,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="replyLikes != null">
        reply_likes = #{replyLikes,jdbcType=INTEGER},
      </if>
    </set>
    where reply_id = #{replyId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="Replies">
    update replies
    set comment_id = #{commentId,jdbcType=INTEGER},
      from_user_id = #{fromUserId,jdbcType=INTEGER},
      to_user_id = #{toUserId,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR},
      reply_likes = #{replyLikes,jdbcType=INTEGER}
    where reply_id = #{replyId,jdbcType=INTEGER}
  </update>
</mapper>
